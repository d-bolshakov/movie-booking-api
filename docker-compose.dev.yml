version: '3'
services:
  db:
    container_name: movie-booking-db-dev
    image: postgres:alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: root
    volumes:
      - ./volumes/postgres-dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    
  
  backend:
    container_name: movie-booking-backend-dev
    build: 
      context: .
      dockerfile: Dockerfile.backend
      target: dev
    image: movie-booking-backend:dev
    volumes:
      - .:/app
    expose:
      - '5000'
    ports:
      - 5000:5000
    restart: always
    env_file:
      - .development.env
    command: npm run start:dev
    depends_on:
      db:
        condition: service_healthy

  migrations:
    container_name: movie-booking-migrations-dev
    image: movie-booking-migrations:dev
    build:
      context: .
      dockerfile: Dockerfile.migrations
    env_file:
      - .development.env
    depends_on:
      db:
        condition: service_healthy

networks:
  default:
    ipam:
      config:
        - subnet: 172.37.0.0/16
        